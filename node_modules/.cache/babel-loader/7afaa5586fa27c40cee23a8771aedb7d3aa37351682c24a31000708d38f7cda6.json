{"ast":null,"code":"import getPasswordConfig from \"./ConfigManager\";\nconst validatePassword = password => {\n  let passwordPolicy = getPasswordConfig();\n  console.log(password);\n  if (password.length < passwordPolicy.minLength) {\n    return false;\n  }\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasNumber = /\\d/.test(password);\n  var numberOfConstrains = 0;\n  if (hasLowercase) {\n    numberOfConstrains++;\n  }\n  if (hasUppercase) {\n    numberOfConstrains++;\n  }\n  if (hasSpecialChar) {\n    numberOfConstrains++;\n  }\n  if (hasNumber) {\n    numberOfConstrains++;\n  }\n  if (numberOfConstrains < passwordPolicy.requiredCharacterTypes) {\n    return false;\n  }\n  return true;\n};\nconst passwordErrorMessage = getPasswordConfig().errorMessage;\nexport { validatePassword, passwordErrorMessage };","map":{"version":3,"names":["getPasswordConfig","validatePassword","password","passwordPolicy","console","log","length","minLength","hasLowercase","test","hasUppercase","hasSpecialChar","hasNumber","numberOfConstrains","requiredCharacterTypes","passwordErrorMessage","errorMessage"],"sources":["C:/Program Files (x86)/cyberSecurity_good/client/src/utils/PasswordValidatior.js"],"sourcesContent":["import getPasswordConfig from \"./ConfigManager\"\r\n\r\nconst validatePassword = (password) => {\r\n  let passwordPolicy = getPasswordConfig()\r\n  console.log(password)\r\n  if(password.length < passwordPolicy.minLength){\r\n    return false;\r\n  }\r\n\r\n  const hasLowercase = /[a-z]/.test(password);\r\n  const hasUppercase = /[A-Z]/.test(password);\r\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n  const hasNumber = /\\d/.test(password);\r\n\r\n  var numberOfConstrains = 0;\r\n\r\n  if (hasLowercase) {\r\n    numberOfConstrains++;\r\n  }\r\n\r\n  if (hasUppercase) {\r\n    numberOfConstrains++;\r\n  }\r\n\r\n  if (hasSpecialChar) {\r\n    numberOfConstrains++;\r\n  }\r\n\r\n  if (hasNumber) {\r\n    numberOfConstrains++;\r\n  }\r\n\r\n  if(numberOfConstrains < passwordPolicy.requiredCharacterTypes){\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconst passwordErrorMessage = getPasswordConfig().errorMessage;\r\n\r\nexport {validatePassword, passwordErrorMessage}"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,iBAAiB;AAE/C,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EACrC,IAAIC,cAAc,GAAGH,iBAAiB,CAAC,CAAC;EACxCI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EACrB,IAAGA,QAAQ,CAACI,MAAM,GAAGH,cAAc,CAACI,SAAS,EAAC;IAC5C,OAAO,KAAK;EACd;EAEA,MAAMC,YAAY,GAAG,OAAO,CAACC,IAAI,CAACP,QAAQ,CAAC;EAC3C,MAAMQ,YAAY,GAAG,OAAO,CAACD,IAAI,CAACP,QAAQ,CAAC;EAC3C,MAAMS,cAAc,GAAG,wBAAwB,CAACF,IAAI,CAACP,QAAQ,CAAC;EAC9D,MAAMU,SAAS,GAAG,IAAI,CAACH,IAAI,CAACP,QAAQ,CAAC;EAErC,IAAIW,kBAAkB,GAAG,CAAC;EAE1B,IAAIL,YAAY,EAAE;IAChBK,kBAAkB,EAAE;EACtB;EAEA,IAAIH,YAAY,EAAE;IAChBG,kBAAkB,EAAE;EACtB;EAEA,IAAIF,cAAc,EAAE;IAClBE,kBAAkB,EAAE;EACtB;EAEA,IAAID,SAAS,EAAE;IACbC,kBAAkB,EAAE;EACtB;EAEA,IAAGA,kBAAkB,GAAGV,cAAc,CAACW,sBAAsB,EAAC;IAC5D,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC;AAED,MAAMC,oBAAoB,GAAGf,iBAAiB,CAAC,CAAC,CAACgB,YAAY;AAE7D,SAAQf,gBAAgB,EAAEc,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}